-z is towards the camera.
-x is left
x is right

pretty sure blood's sprites are 1px = 0.1 godot units.

				if adjacent[0].x != 0:
					if Vector3(cell.x, cell.y, cell.z + 1) in original_used_cells:
						print("Tile above.")
						set_cell_item(cell.x, cell.y, cell.z, 1, 0)
					elif Vector3(cell.x, cell.y, cell.z - 1) in original_used_cells:
						print("Tile below.")
						set_cell_item(cell.x, cell.y, cell.z, 1, 10)
				elif adjacent[0].z != 0:
					if Vector3(cell.x + 1, cell.y, cell.z - 1) in original_used_cells:
						print("Tile right.")
						set_cell_item(cell.x, cell.y, cell.z, 1, 16)
					elif Vector3(cell.x - 1, cell.y, cell.z - 1) in original_used_cells:
						print("Tile left.")
						set_cell_item(cell.x, cell.y, cell.z, 1, 22)

what are the ways i can handle this peephole scenario?

- use alpha directly on the meshes
	- will fuck up the render order for everything in my game and i'll need to give everything a material to ensure everything layers properly
- vertex cutout? dunno if thats even possible. need to look into vertex shaders
- color rect that overlays the screen and draws the output of a seperate camera to a circle cutout
- same as above but with a sprite3d that follows the player (need to account for camera perspective looking into the portal) (probably the best option)


LAYERS:
For clarity, collision and visual layers will aim to match.
1: Floor.
2: Walls.
3: Drone.

To a drone, there is nothing more special and important than birds. They are wonderful creatures that fill you with joy and the energy to carry on. Should you find one on your travels, make the most of the time you share together, and cherish what it leaves behind.